"""add_document_id_to_activity

Revision ID: 79c9f7e1ecc2
Revises: 6ee0728482d6
Create Date: 2025-09-10 08:08:25.774756

"""

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "79c9f7e1ecc2"
down_revision: str | Sequence[str] | None = "6ee0728482d6"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Add document_id column as nullable first
    op.add_column("activities", sa.Column("document_id", sa.Integer(), nullable=True))

    # Set a default value for existing records (using 1 as a fallback for testing)
    op.execute("UPDATE activities SET document_id = 1 WHERE document_id IS NULL")

    # Now make the column not null
    op.alter_column("activities", "document_id", nullable=False)

    # Drop the old columns only if they exist (conditional drops for fresh databases)
    # Check if columns exist before dropping them
    from sqlalchemy import inspect

    inspector = inspect(op.get_bind())
    columns = [col["name"] for col in inspector.get_columns("activities")]

    columns_to_drop = ["instructions", "pdf_document_id", "assessment_criteria", "description", "learning_objectives"]
    for column in columns_to_drop:
        if column in columns:
            op.drop_column("activities", column)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop document_id column first
    op.drop_column("activities", "document_id")

    # Add back the old columns only if they don't exist
    from sqlalchemy import inspect

    inspector = inspect(op.get_bind())
    columns = [col["name"] for col in inspector.get_columns("activities")]

    if "instructions" not in columns:
        op.add_column(
            "activities", sa.Column("instructions", sa.VARCHAR(length=5000), autoincrement=False, nullable=True)
        )
    if "pdf_document_id" not in columns:
        op.add_column("activities", sa.Column("pdf_document_id", sa.INTEGER(), autoincrement=False, nullable=True))
    if "assessment_criteria" not in columns:
        op.add_column(
            "activities",
            sa.Column(
                "assessment_criteria",
                postgresql.JSON(astext_type=sa.Text()),
                autoincrement=False,
                nullable=True,
            ),
        )
    if "description" not in columns:
        op.add_column(
            "activities",
            sa.Column("description", sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
        )
    if "learning_objectives" not in columns:
        op.add_column(
            "activities",
            sa.Column(
                "learning_objectives",
                postgresql.JSON(astext_type=sa.Text()),
                autoincrement=False,
                nullable=True,
            ),
        )
    # ### end Alembic commands ###
